{"ast":null,"code":"import _objectSpread from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar api = 'https://reactnd-books-api.udacity.com'; // Generate a unique token for storing your bookshelf data on the backend server.\n\nvar token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nvar headers = {\n  Accept: 'application/json',\n  Authorization: token\n};\nexport var get = function get(bookId) {\n  return fetch(\"\".concat(api, \"/books/\").concat(bookId), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.book;\n  });\n};\nexport var getAll = function getAll() {\n  return fetch(\"\".concat(api, \"/books\"), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n};\nexport var update = function update(book, shelf) {\n  return fetch(\"\".concat(api, \"/books/\").concat(book.id), {\n    method: 'PUT',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      shelf: shelf\n    })\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var search = function search(query, maxResults) {\n  return fetch(\"\".concat(api, \"/search\"), {\n    method: 'POST',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      query: query,\n      maxResults: maxResults\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n};","map":{"version":3,"sources":["/Users/maame/Desktop/reactnd-project-myreads-starter/src/components/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query","maxResults"],"mappings":";AAAA,IAAMA,GAAG,GAAG,uCAAZ,C,CAEA;;AACA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AACA,IAAI,CAACA,KAAL,EACEA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAC1BC,QAD0B,CACjB,EADiB,EAE1BC,MAF0B,CAEnB,CAAC,CAFkB,CAA7B;AAIF,IAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,kBADM;AAEdC,EAAAA,aAAa,EAAER;AAFD,CAAhB;AAKA,OAAO,IAAMS,GAAG,GAAG,SAANA,GAAM,CAAAC,MAAM;AAAA,SACvBC,KAAK,WAAIZ,GAAJ,oBAAiBW,MAAjB,GAA2B;AAAEJ,IAAAA,OAAO,EAAPA;AAAF,GAA3B,CAAL,CACGM,IADH,CACQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADX,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACC,IAAT;AAAA,GAFZ,CADuB;AAAA,CAAlB;AAKP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SACpBN,KAAK,WAAIZ,GAAJ,aAAiB;AAAEO,IAAAA,OAAO,EAAPA;AAAF,GAAjB,CAAL,CACGM,IADH,CACQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADX,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GAFZ,CADoB;AAAA,CAAf;AAKP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACH,IAAD,EAAOI,KAAP;AAAA,SACpBT,KAAK,WAAIZ,GAAJ,oBAAiBiB,IAAI,CAACK,EAAtB,GAA4B;AAC/BC,IAAAA,MAAM,EAAE,KADuB;AAE/BhB,IAAAA,OAAO,oBACFA,OADE;AAEL,sBAAgB;AAFX,MAFwB;AAM/BiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA,KAAK,EAALA;AAAF,KAAf;AANyB,GAA5B,CAAL,CAOGR,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,CADoB;AAAA,CAAf;AAUP,OAAO,IAAMY,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,UAAR;AAAA,SACpBjB,KAAK,WAAIZ,GAAJ,cAAkB;AACrBuB,IAAAA,MAAM,EAAE,MADa;AAErBhB,IAAAA,OAAO,oBACFA,OADE;AAEL,sBAAgB;AAFX,MAFc;AAMrBiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEE,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,UAAU,EAAVA;AAAT,KAAf;AANe,GAAlB,CAAL,CAQGhB,IARH,CAQQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GARX,EASGF,IATH,CASQ,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GATZ,CADoB;AAAA,CAAf","sourcesContent":["const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: 'application/json',\n  Authorization: token\n};\n\nexport const get = bookId =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query, maxResults })\n  })\n    .then(res => res.json())\n    .then(data => data.books);\n"]},"metadata":{},"sourceType":"module"}