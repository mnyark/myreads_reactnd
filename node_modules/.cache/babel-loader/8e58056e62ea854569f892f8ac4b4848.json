{"ast":null,"code":"import _classCallCheck from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/maame/Desktop/reactnd-project-myreads-starter/src/BooksSearch.js\";\nimport React from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom';\nimport Book from \"./Book\";\nimport BooksSearchResults from './BooksSearchResults';\nimport BooksNotFound from './BooksNotFound';\nimport PropTypes from 'prop-types';\nimport { Debounce } from 'react-throttle';\nimport * as BooksAPI from '../BooksAPI';\n\nvar BooksSearch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BooksSearch, _React$Component);\n\n  function BooksSearch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BooksSearch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BooksSearch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      booksQuery: []\n    };\n\n    _this.intersect = function (a, b) {\n      var t;\n\n      if (b.length > a.length) {\n        t = b;\n        b = a;\n        a = t; // indexOf to loop over shorter\n      }\n\n      return a.filter(function (e) {\n        return b.indexOf(e) > -1;\n      });\n    };\n\n    _this.updateQuery = function (query) {\n      //if query is empty set the booksQuery state\n      //to empty and return so as not to make an unnecessary\n      //request\n      if (query === '') {\n        _this.setState({\n          booksQuery: []\n        });\n\n        return;\n      }\n\n      BooksAPI.search(query, 20).then(function (books) {\n        _this.updateBookSearchState(books); //if call returns empty/error set booksQuery prop to empty\n\n\n        if (books !== undefined && books.error !== \"empty query\") {\n          _this.setState({\n            booksQuery: books\n          });\n        } else {\n          _this.setState({\n            booksQuery: []\n          });\n        }\n      });\n    };\n\n    _this.updateBookSearchState = function (books) {\n      if (books !== undefined && books.error !== \"empty query\") {\n        // since the search method does not return proper shelf we need to iterate over our current\n        // states and the new search terms to find what the current shelf state is for each book\n        var bookIds = books.map(function (book) {\n          return book.id;\n        }); // let currentlyReadingIntersect = this.intersect(bookIds, this.state.currentlyReading.map( cr => cr.id));\n\n        var currentlyReadingIntersect = _this.intersect(bookIds, _this.props.bsBooks.filter(function (cr) {\n          return cr.shelf === 'currentlyReading';\n        }).map(function (b) {\n          return b.id;\n        }));\n\n        var readIntersects = _this.intersect(bookIds, _this.props.bsBooks.filter(function (r) {\n          return r.shelf === 'read';\n        }).map(function (b) {\n          return b.id;\n        }));\n\n        var wantToReadIntersects = _this.intersect(bookIds, _this.props.bsBooks.filter(function (wr) {\n          return wr.shelf === 'wantToRead';\n        }).map(function (b) {\n          return b.id;\n        }));\n\n        for (var i = 0; i < books.length; i++) {\n          if (currentlyReadingIntersect.includes(books[i].id)) {\n            books[i].shelf = 'currentlyReading';\n          }\n\n          if (readIntersects.includes(books[i].id)) {\n            books[i].shelf = 'read';\n          }\n\n          if (wantToReadIntersects.includes(books[i].id)) {\n            books[i].shelf = 'wantToRead';\n          }\n        }\n      }\n    };\n\n    _this.clearQuery = function () {\n      _this.setState({\n        query: '',\n        booksQuery: []\n      });\n    };\n\n    _this.handleBookShelfChange = function (book, shelf) {\n      _this.props.onBookShelfChange(book, shelf);\n    };\n\n    return _this;\n  }\n\n  _createClass(BooksSearch, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/\",\n        className: \"close-search\",\n        onClick: this.clearQuery,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Debounce, {\n        time: \"200\",\n        handler: \"onChange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        onChange: function onChange(event) {\n          return _this2.updateQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"ol\", {\n        className: \"books-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.state.booksQuery.map(function (book) {\n        return React.createElement(\"li\", {\n          key: book.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(Book, {\n          book: book,\n          booksShelfChange: _this2.handleBookShelfChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }));\n      }))));\n    }\n  }]);\n\n  return BooksSearch;\n}(React.Component);\n\nBooksSearch.propType = {\n  bsBooks: PropTypes.array.isRequired,\n  onBookShelfChange: PropTypes.func.isRequired //got this function from https://stackoverflow.com/questions/16227197/compute-intersection-of-two-arrays-in-javascript\n\n};\nexport default BooksSearch;","map":{"version":3,"sources":["/Users/maame/Desktop/reactnd-project-myreads-starter/src/BooksSearch.js"],"names":["React","Link","Book","BooksSearchResults","BooksNotFound","PropTypes","Debounce","BooksAPI","BooksSearch","state","booksQuery","intersect","a","b","t","length","filter","e","indexOf","updateQuery","query","setState","search","then","books","updateBookSearchState","undefined","error","bookIds","map","book","id","currentlyReadingIntersect","props","bsBooks","cr","shelf","readIntersects","r","wantToReadIntersects","wr","i","includes","clearQuery","handleBookShelfChange","onBookShelfChange","event","target","value","Component","propType","array","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport { Link } from 'react-router-dom' \nimport Book from \"./Book\"\nimport BooksSearchResults from './BooksSearchResults'\nimport BooksNotFound from './BooksNotFound'\nimport PropTypes from 'prop-types';\nimport { Debounce } from 'react-throttle';\nimport * as BooksAPI from '../BooksAPI'\n\n\nclass BooksSearch extends React.Component {\n\n\n\t\nstate = {\n        booksQuery: []\n    }\n\n    static propType = {\n        bsBooks: PropTypes.array.isRequired,\n        onBookShelfChange: PropTypes.func.isRequired\n    }\n\n    //got this function from https://stackoverflow.com/questions/16227197/compute-intersection-of-two-arrays-in-javascript\n    intersect = (a, b) => {\n        let t;\n        if (b.length > a.length) {\n            t = b;\n            b = a;\n            a = t; // indexOf to loop over shorter\n        }\n        return a.filter(function (e) {\n            return b.indexOf(e) > -1;\n        });\n    }\n\n    updateQuery = (query) => {\n\n        //if query is empty set the booksQuery state\n        //to empty and return so as not to make an unnecessary\n        //request\n        if(query === '') {\n            this.setState({\n                booksQuery: []\n            })\n\n            return\n        }\n\n        BooksAPI.search(query, 20).then((books) => {\n\n            this.updateBookSearchState(books);\n\n            //if call returns empty/error set booksQuery prop to empty\n            if (books !== undefined && books.error !== \"empty query\") {\n\n                this.setState({\n                    booksQuery: books\n                })\n            } else {\n                this.setState({\n                    booksQuery: []\n                })\n            }\n\n        })\n\n\n    }\n\n    updateBookSearchState = (books) => {\n\n        if(books !== undefined && books.error !== \"empty query\") {\n            // since the search method does not return proper shelf we need to iterate over our current\n            // states and the new search terms to find what the current shelf state is for each book\n            let bookIds = books.map(book => book.id);\n            // let currentlyReadingIntersect = this.intersect(bookIds, this.state.currentlyReading.map( cr => cr.id));\n            let currentlyReadingIntersect = this.intersect(bookIds, this.props.bsBooks.filter((cr) => cr.shelf === 'currentlyReading').map(b => b.id));\n            let readIntersects = this.intersect(bookIds, this.props.bsBooks.filter(r => r.shelf === 'read').map((b) => b.id));\n            let wantToReadIntersects = this.intersect(bookIds, this.props.bsBooks.filter((wr) => wr.shelf === 'wantToRead').map((b) => b.id));\n\n            for (let i = 0; i < books.length; i++) {\n                if (currentlyReadingIntersect.includes(books[i].id)) {\n                    books[i].shelf = 'currentlyReading';\n                }\n                if (readIntersects.includes(books[i].id)) {\n                    books[i].shelf = 'read';\n                }\n                if (wantToReadIntersects.includes(books[i].id)) {\n                    books[i].shelf = 'wantToRead';\n                }\n            }\n        }\n    }\n\n    //used to clear query and state on search page exit\n    clearQuery = () => {\n        this.setState({\n            query: '',\n            booksQuery: []\n        })\n    }\n\n    handleBookShelfChange = (book, shelf) => {\n        this.props.onBookShelfChange(book, shelf);\n    }\n\n    render() {\n\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link\n                        to=\"/\"\n                        className=\"close-search\"\n                        onClick={this.clearQuery}\n                    >Close</Link>\n                    <div className=\"search-books-input-wrapper\">\n                        {/*Have the Debouce method here to prevent quick type errors*/}\n                        <Debounce time=\"200\" handler=\"onChange\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Search by title or author\"\n                                onChange={(event) => this.updateQuery(event.target.value)}\n                            />\n                        </Debounce>\n\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {this.state.booksQuery.map(book => (\n                            <li key={book.id}>\n                                <Book\n                                    book={book}\n                                    booksShelfChange={this.handleBookShelfChange}\n                                />\n                            </li>\n                        ))}\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\nexport default BooksSearch\n"]},"metadata":{},"sourceType":"module"}