{"ast":null,"code":"import _classCallCheck from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maame/Desktop/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/maame/Desktop/reactnd-project-myreads-starter/src/Book.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ShelfChanger from './ShelfChanger';\nimport noCover from './no-cover-image.png';\n\nvar Book =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Book, _Component);\n\n  function Book() {\n    _classCallCheck(this, Book);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Book).apply(this, arguments));\n  }\n\n  _createClass(Book, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          book = _this$props.book,\n          books = _this$props.books,\n          changeShelf = _this$props.changeShelf; // add fallbacks for missing cover images and title\n\n      var coverImg = book.imageLinks && book.imageLinks.thumbnail ? book.imageLinks.thumbnail : noCover;\n      var title = book.title ? book.title : 'No title available';\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"book\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"book-top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"book-cover\",\n        style: {\n          backgroundImage: \"url(\".concat(coverImg, \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), React.createElement(ShelfChanger, {\n        book: book,\n        books: books,\n        changeShelf: changeShelf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"book-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, title),\n      /* Check for authors and render each on separate line if exist*/\n      book.authors && book.authors.map(function (author, index) {\n        return React.createElement(\"div\", {\n          className: \"book-authors\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, author);\n      })));\n    }\n  }]);\n\n  return Book;\n}(Component);\n\nBook.propTypes = {\n  book: PropTypes.object.isRequired,\n  books: PropTypes.array.isRequired,\n  changeShelf: PropTypes.func.isRequired\n};\nexport default Book;","map":{"version":3,"sources":["/Users/maame/Desktop/reactnd-project-myreads-starter/src/Book.js"],"names":["React","Component","PropTypes","ShelfChanger","noCover","Book","props","book","books","changeShelf","coverImg","imageLinks","thumbnail","title","backgroundImage","authors","map","author","index","propTypes","object","isRequired","array","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;IAEMC,I;;;;;;;;;;;;;6BAOK;AAAA,wBAC8B,KAAKC,KADnC;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,KADP,eACOA,KADP;AAAA,UACcC,WADd,eACcA,WADd,EAGP;;AACA,UAAMC,QAAQ,GACZH,IAAI,CAACI,UAAL,IAAmBJ,IAAI,CAACI,UAAL,CAAgBC,SAAnC,GACIL,IAAI,CAACI,UAAL,CAAgBC,SADpB,GAEIR,OAHN;AAIA,UAAMS,KAAK,GAAGN,IAAI,CAACM,KAAL,GAAaN,IAAI,CAACM,KAAlB,GAA0B,oBAAxC;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,EAAC,YADZ;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,gBAASJ,QAAT;AAAjB,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAEH,IAApB;AAA0B,QAAA,KAAK,EAAEC,KAAjC;AAAwC,QAAA,WAAW,EAAEC,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF,EAQE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BI,KAA7B,CARF;AASG;AACDN,MAAAA,IAAI,CAACQ,OAAL,IACER,IAAI,CAACQ,OAAL,CAAaC,GAAb,CAAiB,UAACC,MAAD,EAASC,KAAT;AAAA,eACf;AAAK,UAAA,SAAS,EAAC,cAAf;AAA8B,UAAA,GAAG,EAAEA,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGD,MADH,CADe;AAAA,OAAjB,CAXJ,CADF,CADF;AAqBD;;;;EAtCgBhB,S;;AAAbI,I,CACGc,S,GAAY;AACjBZ,EAAAA,IAAI,EAAEL,SAAS,CAACkB,MAAV,CAAiBC,UADN;AAEjBb,EAAAA,KAAK,EAAEN,SAAS,CAACoB,KAAV,CAAgBD,UAFN;AAGjBZ,EAAAA,WAAW,EAAEP,SAAS,CAACqB,IAAV,CAAeF;AAHX,C;AAwCrB,eAAehB,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ShelfChanger from './ShelfChanger';\nimport noCover from './no-cover-image.png';\n\nclass Book extends Component {\n  static propTypes = {\n    book: PropTypes.object.isRequired,\n    books: PropTypes.array.isRequired,\n    changeShelf: PropTypes.func.isRequired\n  };\n\n  render() {\n    const { book, books, changeShelf } = this.props;\n\n    // add fallbacks for missing cover images and title\n    const coverImg =\n      book.imageLinks && book.imageLinks.thumbnail\n        ? book.imageLinks.thumbnail\n        : noCover;\n    const title = book.title ? book.title : 'No title available';\n\n    return (\n      <li>\n        <div className=\"book\">\n          <div className=\"book-top\">\n            <div\n              className=\"book-cover\"\n              style={{ backgroundImage: `url(${coverImg})` }}\n            />\n            <ShelfChanger book={book} books={books} changeShelf={changeShelf} />\n          </div>\n          <div className=\"book-title\">{title}</div>\n          {/* Check for authors and render each on separate line if exist*/\n          book.authors &&\n            book.authors.map((author, index) => (\n              <div className=\"book-authors\" key={index}>\n                {author}\n              </div>\n            ))}\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default Book;"]},"metadata":{},"sourceType":"module"}